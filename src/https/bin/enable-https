#!/bin/sh

# shellcheck source=src/https/utilities/https-utilities
. "$SNAP/utilities/https-utilities"

COMMAND="nextcloud-nextbox.enable-https"

print_usage()
{
	echo "Usage:"
	echo ""
	echo "    $COMMAND letsencrypt <email> <domain1> [domainX]"
	echo ""
}

handle_lets_encrypt()
{
	extra_params=""
	dry_run=false

  email=$1
	shift
	main_domain=$1
  domains=""
  for domain in "$@";
	do
		domains="$domains -d $domain"
	done


	printf "Attempting to obtain certificates... "
	# Building CLI commands, so we don't WANT to quote some of these (they need
	# to be separated by whitespace): disable the check
	# shellcheck disable=SC2086
	if ! output="$(run_certbot certonly $extra_params \
	             --authenticator webroot \
	             --webroot-path "$CERTBOT_DIRECTORY" \
	             --rsa-key-size 4096 \
	             --email "$email" \
	             --non-interactive \
	             --agree-tos \
	             --force-renewal \
	             $domains 2>&1)"; then
		printf "error running certbot:\n\n" >&2
		echo "$output" >&2
		exit 1
	fi

	echo "done"
	if [ "$dry_run" = true ]; then
		echo "Looks like you're ready for HTTPS!"
	else
		activate_certbot_certificate $main_domain
		echo ENABLE-HTTPS RUNNING: activate_certbot_certificate $main_domain
	fi
}

handle_self_signed()
{
	while getopts ":h" opt; do
		case $opt in
			h)
				echo "Usage:"
				echo "    $COMMAND self-signed [-h]"
				echo ""
				echo "    Generate and use a self-signed certificate. This is"
				echo "    easier to setup than Let's Encrypt certificates, but"
				echo "    will cause warnings in browsers."
				echo ""
				echo "    -h: Display this help message"
				exit 0
				;;
			\?)
				echo "Invalid option: -$OPTARG" >&2
				exit 1
				;;
		esac
	done

	printf "Generating key and self-signed certificate... "
	if ! output="$(generate_self_signed_certificate 2>&1)"; then
		printf "error:\n" >&2
		echo "$output" >&2
		exit 1
	fi

	printf "done\n"
	activate_self_signed_certificate
}

handle_custom()
{
	enable_hsts=false

	while getopts ":hs" opt; do
		case $opt in
			h)
				echo "Usage:"
				echo "    $COMMAND custom [-h -s] <cert> <key> <chain>"
				echo ""
				echo "    Use certificates generated by other means. Note that"
				echo "    the files provided to this command must be readable"
				echo "    by the snap, which means they must contained in one"
				echo "    of four directory trees:"
				echo "      - $SNAP_CURRENT"
				echo "      - $SNAP_COMMON"
				echo "      - $SNAP_USER_DATA"
				echo "      - $SNAP_USER_COMMON"
				echo ""
				echo "    Also note that this command will create copies of the"
				echo "    files provided; if this command completes"
				echo "    successfully, they can be safely removed."
				echo ""
				echo "    -h: Display this help message."
				echo "    -s: Enable HTTP Strict Transport Security (HSTS)"
				echo "        (default is off-- leave off if self-signed)."
				exit 0
				;;
			s)
				enable_hsts=true
				;;
			\?)
				echo "Invalid option: -$OPTARG" >&2
				exit 1
				;;
		esac
	done
	shift $((OPTIND-1))

	if [ $# -ne 3 ]; then
		printf "This subcommand requires three positional parameters: " >&2
		printf "<cert> <key> <chain>\n" >&2
		exit 1
	fi

	certificate=$1
	private_key=$2
	chain=$3

	printf "Installing custom certificate... "
	if ! output="$(install_custom_certificate \
	               "$certificate" "$private_key" "$chain" \
	               "$enable_hsts" 2>&1)"; then
		echo "error:" >&2
		echo "$output" >&2
		exit 1
	fi

	printf "done\n"
	activate_custom_certificate
}

if [ "$(id -u)" -ne 0 ]; then
	echo "This utility needs to run as root"
	exit 1
fi

# Parse options for the base command
while getopts ":h" opt; do
	case $opt in
		h)
			print_usage
			exit 0
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

if [ $# = 0 ]; then
	echo "Missing subcommand. Run '$COMMAND -h' for help." >&2
	exit 1
fi

subcommand=$1
shift # Remove subcommand from args
case $subcommand in
	lets-encrypt)
		handle_lets_encrypt "$@"
		;;
	self-signed)
		handle_self_signed "$@"
		;;
	custom)
		handle_custom "$@"
		;;
	*)
		echo "No such subcommand: $subcommand. Run '$COMMAND -h' for help." >&2
		exit 1
		;;
esac
